                PROGRAM EIGEN
comp_eval(e_m_max,m_0,m_f,A,B,step,window,matz,perturb,
     _        AT,BT,trans,revers,ddebug,evl_write,evlnam,evcnam,
     _        evlfil,evcfil,count,count_max,dist,
     _                  Z,alfr,alfi,beta,prevr,previ,eval_beta,tag,type)
eval_matrix(max_m,m,A,B,perturb,revers,trans,
     _                        A_norm,B_norm,debug)
perturb_mat(max_m,m,A,perturb)
NORM(maxm,MM,A,ANORM)
BLOCK_TAU_KM(e_m_max,m_trunc,m_f,k,m,A,B,AT,BT)
*************************************************************************
-------------------- band_op.f
BAND_OP       INITIALIZE ARRAYS FOR 2*p+1 BANDED SOLVER: UL factorization,
UL_SOL        SOLVE BANDED SYSTEM in U*L factored form:
                            -----  U : P(i, 1.. q,j), unit diagonal  ---
                            -----  L : P(i, 0..-q,j)                 ---
*************************************************************************
------------------   band_pack.
BBADD    Add two banded matrices A,B and put result in C. 
BBMUL    Multiply two banded matrices A,B and put result in C. 
BFCON
BFMUL    Multiply banded matrix A times full matrix B and put result in C.
  X-->   Can have B = C so that second input may or may not be overwritten
OPMUL    Multiply banded operator A times full matrix B and put result in C.
*************************************************************************
                   cheb_pack.f
D1MAT
R1D1MAT
R2LAPNMAT
R2LAPNMATMUL
D1TH
D1R
R1D1R
CHEBINT     Produces the integrals of these functions over [-1,1].
CONVOL
COND1_MAT  -- preconditioner B_[2]^pp (x+a)^kk with bands -(pp+kk):(pp+kk)
RDIV         Experimental division routine. Divides U by x+a, puts result in U0
KOPER(ORD,MAXM,MC,DOP1)  Chebyshev derivative operator of order ORD
*************************************************************************
                full_pack.f
FFMUL       Multiply two matrices using a GAXPY algorithm (Gollub/VanLoan p.12)
COPYM       Copy array into another; assumes different leading column dimensions
************ From here on, arrays are dimensioned 0:*****************
MUG
REMMOD
POINT_MULT
ADDM
ERROR            compute a specified norm of the difference of two fields
*************************************************************************
                ge_pack.f
COND1_GE(maxm,pp,kk,nu,OP,aspect,debug,buff)
                 preconditioned version of operators for Gegenbauer
*************************************************************************
		gen_pack.f
COND1_POL(maxm,pp,kk,kind,al,be,OP,aspect,debug,buff)
C     KIND 1: Legendre
C     KIND 2: Chebyshev
C     KIND 3: Chebyshev 2nd kind
C     KIND 4: Hermite
C     KIND 5: Jacobi
C     KIND 6: Laguerre
C     KIND 7: Gegenbauer
+++++++++++++++++++++++++++ Not doe yet, still copy of COND1_JA
*************************************************************************
		jac_pack.f
COND1_JA(maxm,pp,kk,al,be,OP,aspect,debug,buff)
*************************************************************************
		matrix.f
MATRIX(MMAX,MM,A,B,F,FLAG,TPLUS,TMINUS)
*************************************************************************
		opers.f
OPER1(MM,A,B)  Laplace; Chebyshev
matmult1(a,b,h,maxm,mm,ma,nb,namb)
oper2(MM,A,B)
oper3(MM,A,B)
oper4(MM,A,B)
*************************************************************************
		poly.f
    compute point evaluation operator by requrrence relations
che_q(x,k,n,q)
ge_q(x,nu,k,n,q)
jac_q(x,al,be,k,n,q)
*************************************************************************
